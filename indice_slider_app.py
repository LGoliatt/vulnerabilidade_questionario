import streamlit as st
import pandas as pd
import numpy as np


st.set_page_config(page_title="Compara√ß√£o de Crit√©rios - AHP", layout="centered")

st.title("An√°lise de Compara√ß√£o Par a Par")
st.markdown("### Deslize para indicar a import√¢ncia relativa entre os crit√©rios")

st.info("**Lembre-se:** Se voc√™ prefere 'A' a 'B', e 'B' a 'C', ent√£o voc√™ deve preferir 'A' a 'C' para manter consist√™ncia.")

# Fun√ß√£o para exibir o slider com descri√ß√£o intuitiva
def comparacao_criterios(label_a, label_b, key):
    valor = st.slider(
        f"{label_a} vs {label_b}",
        min_value=1,
        max_value=9,
        value=5,
        step=1,
        help=f"1 = {label_a} √© igualmente importante a {label_b}, 9 = um dos crit√©rios √© extremamente mais importante.",
        key=key
    )
    if valor < 5:
        st.write(f"‚û°Ô∏è **{label_b}** √© mais importante que **{label_a}**")
    elif valor > 5:
        st.write(f"‚û°Ô∏è **{label_a}** √© mais importante que **{label_b}**")
    else:
        st.write("‚û°Ô∏è **Import√¢ncia igual** entre os crit√©rios")
    return valor

# Compara√ß√µes
st.subheader("I. Precipita√ß√£o x Eleva√ß√£o")
prec_elev = comparacao_criterios("Precipita√ß√£o", "Eleva√ß√£o", "prec_elev")

st.subheader("II. Precipita√ß√£o x Declividade")
prec_decliv = comparacao_criterios("Precipita√ß√£o", "Declividade", "prec_decliv")

st.subheader("III. Precipita√ß√£o x Uso e cobertura do solo")
prec_uso = comparacao_criterios("Precipita√ß√£o", "Uso e cobertura do solo", "prec_uso")

st.subheader("IV. Precipita√ß√£o x Textura do solo")
prec_textura = comparacao_criterios("Precipita√ß√£o", "Textura do solo", "prec_textura")

st.subheader("V. Eleva√ß√£o x Declividade")
elev_decliv = comparacao_criterios("Eleva√ß√£o", "Declividade", "elev_decliv")

st.subheader("VI. Eleva√ß√£o x Uso e cobertura do solo")
elev_uso = comparacao_criterios("Eleva√ß√£o", "Uso e cobertura do solo", "elev_uso")

st.subheader("VII. Eleva√ß√£o x Textura do solo")
elev_textura = comparacao_criterios("Eleva√ß√£o", "Textura do solo", "elev_textura")

# Exportar os valores
if st.button("Salvar respostas"):
    respostas = {
        "Precipita√ß√£o x Eleva√ß√£o": prec_elev,
        "Precipita√ß√£o x Declividade": prec_decliv,
        "Precipita√ß√£o x Uso e cobertura do solo": prec_uso,
        "Precipita√ß√£o x Textura do solo": prec_textura,
        "Eleva√ß√£o x Declividade": elev_decliv,
        "Eleva√ß√£o x Uso e cobertura do solo": elev_uso,
        "Eleva√ß√£o x Textura do solo": elev_textura
    }
    st.success("Respostas salvas com sucesso!")
    st.json(respostas)



#==============================================

st.set_page_config(page_title="AHP - Consist√™ncia", layout="centered")
st.title("üéØ Consist√™ncia na An√°lise AHP")
st.markdown("Preencha a tabela comparando os crit√©rios **do ponto de vista da linha em rela√ß√£o √† coluna**.")

st.markdown("""
**Escala de import√¢ncia:**
- 1 = Igual import√¢ncia  
- 3 = Moderada import√¢ncia  
- 5 = Forte import√¢ncia  
- 7 = Muito forte import√¢ncia  
- 9 = Extrema import√¢ncia  
""")

# Crit√©rios a serem comparados
criterios = ["Knowledge", "Communication Skill", "Experience"]
n = len(criterios)

# Inicializa a matriz
matriz = np.ones((n, n))
entrada_usuario = {}

# Gera√ß√£o dos pares (s√≥ metade da matriz superior)
for i in range(n):
    for j in range(i + 1, n):
        key = f"{criterios[i]} vs {criterios[j]}"
        valor = st.selectbox(
            f"Quanto mais importante √© '{criterios[i]}' comparado a '{criterios[j]}'?",
            options=[1, 2, 3, 4, 5, 6, 7, 8, 9],
            index=4,
            key=key
        )
        entrada_usuario[key] = valor
        matriz[i, j] = valor
        matriz[j, i] = round(1 / valor, 3)

# Exibir a matriz preenchida
st.markdown("### üßÆ Matriz de Compara√ß√£o")
df_matriz = pd.DataFrame(matriz, index=criterios, columns=criterios)
st.dataframe(df_matriz, height=250)

# Normaliza√ß√£o da matriz e c√°lculo dos pesos
st.markdown("### üìä Pesos Relativos dos Crit√©rios")
col_sum = matriz.sum(axis=0)
matriz_normalizada = matriz / col_sum
pesos = matriz_normalizada.mean(axis=1)
df_pesos = pd.DataFrame({
    "Crit√©rio": criterios,
    "Peso": pesos
})
st.dataframe(df_pesos.set_index("Crit√©rio"), height=200)

# Verifica√ß√£o de consist√™ncia
st.markdown("### ‚úÖ √çndice de Consist√™ncia (CI)")

# C√°lculo de Œª_max
lambda_max = np.dot(col_sum, pesos)
CI = (lambda_max - n) / (n - 1)

# RI (√çndice Aleat√≥rio) para diferentes tamanhos de matriz (at√© n = 10)
RI_dict = {1: 0.00, 2: 0.00, 3: 0.58, 4: 0.90, 5: 1.12,
           6: 1.24, 7: 1.32, 8: 1.41, 9: 1.45, 10: 1.49}
RI = RI_dict[n]
CR = CI / RI if RI != 0 else 0

st.write(f"Œª_max: {lambda_max:.3f}")
st.write(f"√çndice de Consist√™ncia (CI): {CI:.3f}")
st.write(f"Raz√£o de Consist√™ncia (CR): {CR:.3f}")

if CR < 0.1:
    st.success("A matriz de compara√ß√£o √© consistente! ‚úÖ")
else:
    st.error("A matriz de compara√ß√£o √© inconsistente. ‚ùå Reavalie suas compara√ß√µes.")

# Exportar resultados
if st.button("üì• Exportar como CSV"):
    df_export = df_pesos.set_index("Crit√©rio")
    st.download_button(
        label="Download Pesos como CSV",
        data=df_export.to_csv().encode("utf-8"),
        file_name="pesos_ahp.csv",
        mime="text/csv"
    )

